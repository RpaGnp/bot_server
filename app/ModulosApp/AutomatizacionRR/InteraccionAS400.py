import os
import autoit
from pathlib import Path
from datetime import datetime
import clipboard
import time
import base64
import tempfile
from ConsultorMongo import Handledbmongo
from ConsultorMysql import ConectorDbMysql

CLASSAS400="[class:SunAwtFrame]"
UsuarioRR = "C45795864"
ClaveRR ="Raton126**"

ciudad= "Bogota"
UsuarioRR = "C45521296"
ClaveRR ="Unico24***"

listaArreglos=["Arreglos","MANTENIMIENTO FTTH"]
dicUbicacion={"Inicio de Sesión":1}
dicrutas = {"LLS":{1:["4","{ENTER}","1","{ENTER}"],
				   2:["1","{ENTER}"]},

			"OTS":{1:["4","{ENTER}","4","{ENTER}"],
				   2:["4","{ENTER}"]
			}
}
arrayErroresLLs=["El numero de la Llamada de Servicio no esta en el archivo de Llamadas de Ser",
"Despacho o Ejecuccion de Llamadas de Servicio ha sido pedido pero no hay lla","no existe en el archivo"]


#491619

class ControladorAs400:
	def __init__(self,ArrayCredenciales,ciudad):
		self.Usuario=ArrayCredenciales[0]
		self.Clave=ArrayCredenciales[1]
		self.ciudad = ciudad

	def get_control(self):
		if autoit.win_exists(CLASSAS400):
			activador = (autoit.win_active(CLASSAS400))        	    
			if activador == 0:            
				autoit.win_activate(CLASSAS400)		        
				self.LoginIBM()
				if "Inicio de Sesión" in self.copiarPantalla():
					self.Loginas400()
				else:
					pass

		else:
			self.launcher()
		
	def whereiam(self,labor):
		self.get_control()		
		textPantalla = self.copiarPantalla()		
		if "Menu Principal Sistema de Administracion Cable" in textPantalla:
			return dicrutas[labor][1]
		elif "Menu de Ordenes de Trabajo y Llamadas de Servicio" in textPantalla:
			return dicrutas[labor][2]
		elif "SELECCION DE CRITERIOS PARA DESPACHO LLAMADAS SERV" in textPantalla:
			return []
		elif "COMPLETACION ORDEN DE TRABAJO" in textPantalla:
			return []

	def Loginas400(self):
		self.get_control()
		TextoInicio = self.copiarPantalla()
		if "Inicio de Sesión" in TextoInicio:
			self.EnviarComandosToPantalla([self.Usuario,"{TAB}",self.Clave,"{ENTER}","{ENTER}"],"Información de inicio de sesión")
		time.sleep(2)
		#if "Información de inicio de sesión " in TextoInicio:
		#	self.EnviarComandosToPantalla(["{ENTER}"],"Menu Principal Sistema de Administracion Cable")
		return 1

	def Xlogin(self):
		self.EnviarComandosToPantalla(["+{ESC}","90","{ENTER}"],"Inicio de Sesión")


	def LoginIBM(self):
		if autoit.win_exists("Iniciar sesión en IBM i"):
			hdv=autoit.win_get_handle("Iniciar sesión en IBM i")
			autoit.win_activate_by_handle(hdv)
			autoit.send(self.Usuario)
			time.sleep(0.5)
			autoit.send("{TAB}")
			autoit.send(self.Clave)
			autoit.send("{ENTER}")
			time.sleep(2)
			if self.verificarCambioCalveIBM():
				return 0
			else: 
				return 1

		else:
			return 1

	def verificarCambioCalveIBM(self):
		TituloVentana = "Mensaje de consulta"
		if autoit.win_exists(TituloVentana):
			autoit.win_kill(TituloVentana)
			return 1
		else:
			return 0


	def EnviarComandosToPantalla(self,arraycomandos,titulo):
		'''se espera en u array las teclas pulsadas y tambien los datos a ingresar y valida la pantalla final'''        
		for i in arraycomandos:
			if i != None:
				autoit.send(i)
				time.sleep(0.25)
		time.sleep(1)
		text = clipboard.paste()            	    
		if titulo in text:
			return True
		else:
			return False

	def copiarPantalla(self):
		self.get_control()
		for i in ["^a","^c"]:
			autoit.send(i)
		return clipboard.paste()


	def launcher(self):
		AS400BIN=str(b'')

		DatoEncriptado=AS400BIN[2:-1]
		DatoEncriptado=DatoEncriptado.encode('ascii')
		DatoDessencriptado=base64.b64decode(DatoEncriptado)
		carpetaTem=tempfile.mkdtemp()
		RutaSalida=f"{carpetaTem}\\AS5250RPA.hod"
		
		with open(RutaSalida,"wb") as f:
			f.write(DatoDessencriptado)

		os.system(f"start /d {carpetaTem} {RutaSalida}")
		autoit.tooltip("Ejecutando AS400...",10,10)
		time.sleep(5)
		autoit.tooltip("",0,0)
		time.sleep(3)
		if autoit.win_wait(CLASSAS400,15):
			self.LoginIBM()
			if self.verificarCambioCalveIBM() == 0:
				autoit.win_active(CLASSAS400)
			else:			
				print("Cerrar programa")
				return

	def precancelaot(self):
		self.whereiam()		
		self.EnviarComandosToPantalla(["4","{ENTER}","4","{ENTER}"],"ORDEN DE TRABAJO")

	def precancelalls(self):
		self.whereiam()
		self.EnviarComandosToPantalla(["4","{ENTER}","1","{ENTER}"],"SELECCION DE CRITERIOS PARA DESPACHO LLAMADAS SERV")

	def IngresoOrden(self,Labor,Orden):
		Orden=str(Orden)
		ArrayOrden=Orden.split("_")		
		if len(ArrayOrden) > 1:
			if Labor=="LLS":
				ArrayTeclas=["+{F5}",ArrayOrden[0],"{NUMPADADD}" if len(ArrayOrden[0]) <7 else "+{F5}" ]
			else:
				if "COMPLETACION ORDEN DE TRABAJO" not in self.copiarPantalla():
					self.EnviarComandosToPantalla(["{f4}"],"")
				else:
					pass


				ArrayTeclas =["{ENTER}",ArrayOrden[0],"{UP}","{ENTER}"]
		else:
			if Labor=="LLS":
				ArrayTeclas=["+{F5}",Orden,"{NUMPADADD}" if len(ArrayOrden[0]) <7 else "+{F5}" ]
			else:
				if "CANCELACION ORDEN DE TRABAJO" not in self.copiarPantalla():
					self.EnviarComandosToPantalla(["{f4}"],"")
				else:
					pass				
				ArrayTeclas =["{ENTER}",Orden,"{UP}","{ENTER}",]
			
		
		self.EnviarComandosToPantalla(ArrayTeclas,"")
		return 	self.copiarPantalla()

	def cancelarLLs(self):
		pass
	def CancelarOTS(self):
		self.EnviarComandosToPantalla("{f4}","")				


	def main(self):
		while 1:
			data = ConectorDbMysql().GetData(0,"spr_get_razxcan",["Bogota"])													
			if data !=None:
				print(data)
				Labor ="LLS" if data[7] in listaArreglos else "OTS"				
				# ejecucion para lls
				Ruta = self.whereiam(Labor)				
				self.EnviarComandosToPantalla(Ruta,"")				
				
				IngresoOt = self.IngresoOrden(Labor,data[2])
				
				time.sleep(2)
				LLsAbierta = True
				for i in arrayErroresLLs:
					if i in IngresoOt:				
						LLsAbierta = False

				if LLsAbierta and Labor == "LLS":
					self.cancelarLLs()
				if LLsAbierta and Labor == "OTS":
					self.CancelarOTS()
				else:
					pass

				#self.Xlogin()				
				ConectorDbMysql().UpData("spr_upd_estgescan",[data[1],0,1,0,i,1])							
			else:
				time.sleep(55)
			break


		#self.Loginas400()
		#self.Xlogin()
		
		# Modelo mas conveniente, cerrar seccion descpues de realizar una cancelacion
		# login con usuario de rr dependiendo la regional
		# crear la consulta que trae los datos 




#ControladorAs400([UsuarioRR,ClaveRR],ciudad).main()
'''import json
import ast
import re

x = {"Razon":"VENTA DEVUELTA AL ASESOR","OtLls":"395770641_O_CO_762","Id Usuario Cnd":"1024490805","Asesor Cnd":"ANGIE LISSETT PEÑALOZA LOPEZ","Numero Telefono1":"313-273-2830","Gestion Numero1":"NO PERMITE DEJAR BUZON","Persona_Contesta1":"N/A","Numero Telefono2":"601-813-8786","Gestion Numero2":"TONO AMBULANCIA","Persona_Contesta2":"N/A","SUPERVISOR":"N/A","OBSERVACIONES":"Movil en predio indica que la sus no solicito los rep, que le dijeron que iba un aumento de canales con la vt, la orden no lleva codigos de modificacion, razon 4","null":""}
patron_gestion = re.compile(r'Gestion Numero\d+ :(.+)')
for i,j in x.items():
	if "Gestion Numero" in i and j =="CONTACTO":
		print(j)
'''





